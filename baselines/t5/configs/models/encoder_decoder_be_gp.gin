# BE-GP model configurations specific to semantic parsing tasks.
from __gin__ import dynamic_registration

import seqio
from t5x import adafactor
from t5x.examples.t5 import network

import decoding  # local file import from baselines.t5
import sngp_utils  # local file import from baselines.t5
import be_models  # local file import from baselines.t5.models
from uncertainty_baselines.models import t5_be_gp

# Loss HParam defaults
# NOTE: When fine-tuning the public T5 checkpoints (trained in T5 MeshTF)
# the loss normalizing factor should be set to 1024 * 228 (pretraining
# batch_size * target_token_length).
Z_LOSS = 0.0001
LABEL_SMOOTHING = 0.0
LOSS_NORMALIZING_FACTOR = 233472
DROPOUT_RATE = 0.1

# Optimizer
# `learning_rate` is set by `Trainer.learning_rate_fn`.
OPTIMIZER = @sngp_utils.AdafactorGP()
sngp_utils.AdafactorGP:
  decay_rate = 0.8
  step_offset = 0

# Vocabulary (shared by encoder and decoder)
VOCABULARY = @seqio.SentencePieceVocabulary()
seqio.SentencePieceVocabulary.sentencepiece_model_file = "/bigstore/t5-data/vocabs/cc_all.32000.100extra/sentencepiece.model"
NUM_EMBEDDINGS = 32128  # vocab size rounded to a multiple of 128 for TPU efficiency

# Model class.
# Note: We will use a classifier version of the EncoderDecoder model whose
# score_batch() function returns class logits rather than sequence-level
# (unnormalized) log likelihood scores.
MODEL = @be_models.EncoderDecoderBEGpBeamScoreModel()
be_models.EncoderDecoderBEGpBeamScoreModel:
  module = @t5_be_gp.TransformerBEGp()
  input_vocabulary = %VOCABULARY
  output_vocabulary = %VOCABULARY
  optimizer_def = %OPTIMIZER
  z_loss = %Z_LOSS
  label_smoothing = %LABEL_SMOOTHING
  loss_normalizing_factor = %LOSS_NORMALIZING_FACTOR

network.T5Config:
  vocab_size = %NUM_EMBEDDINGS
  dtype = 'bfloat16'
  head_dim = 64
  dropout_rate = %DROPOUT_RATE

# GP configurations.
# To reset covariance matrix during fine-tuning, we need to set
# STEPS_PER_EPOCH to a concrete value.
STEPS_PER_EPOCH = None
COVMAT_MOMENTUM = -1.
MEAN_FIELD_FACTOR = -1.
NORMALIZE_INPUT = True
# BE configurations
RANDOM_SIGN = 0.5
BE_ENS_SIZE = 3
t5_be_gp.TransformerBEGp:
  config = @network.T5Config()
  ens_size = %BE_ENS_SIZE
  random_sign_init = %RANDOM_SIGN
  be_decoder_layers= (-1,)
  covmat_momentum = %COVMAT_MOMENTUM
  normalize_input = %NORMALIZE_INPUT
  mean_field_factor = %MEAN_FIELD_FACTOR
  ridge_penalty = 1.
  steps_per_epoch = %STEPS_PER_EPOCH

# Decoding override to write Top-K beams and scores to output.
models.EncoderDecoderBeamScoreModel.predict_batch_with_aux.num_decodes = 5
models.EncoderDecoderBeamScoreModel.predict_batch_with_aux.return_all_decodes = True

# Set beam search parameters.
models.EncoderDecoderBeamScoreModel.decode_fn = @decoding.beam_search
decoding.beam_search.alpha = 0.6
decoding.beam_search.return_token_scores = True
