# Model configurations specific to semantic parsing tasks.
from __gin__ import dynamic_registration

import seqio
from t5x import adafactor
from t5x.examples.t5 import network

import models  # local file import from baselines.t5.models

# Loss HParam defaults
# NOTE: When fine-tuning the public T5 checkpoints (trained in T5 MeshTF)
# the loss normalizing factor should be set to 1024 * 228 (pretraining
# batch_size * target_token_length).
Z_LOSS = 0.0001
LABEL_SMOOTHING = 0.0
LOSS_NORMALIZING_FACTOR = 233472
DROPOUT_RATE = 0.1

# Optimizer
# `learning_rate` is set by `Trainer.learning_rate_fn`.
OPTIMIZER = @adafactor.Adafactor()
adafactor.Adafactor:
  decay_rate = 0.8
  step_offset = 0

# Vocabulary (shared by encoder and decoder)
VOCABULARY = @seqio.SentencePieceVocabulary()
seqio.SentencePieceVocabulary.sentencepiece_model_file = "/bigstore/t5-data/vocabs/cc_all.32000.100extra/sentencepiece.model"
NUM_EMBEDDINGS = 32128  # vocab size rounded to a multiple of 128 for TPU efficiency

# Model class.
# Use EncoderDecoderBeamScore model to write Top-K beam results.
MODEL = @models.EncoderDecoderBeamScoreModel()
models.EncoderDecoderBeamScoreModel:
  module = @network.Transformer()
  input_vocabulary = %VOCABULARY
  output_vocabulary = %VOCABULARY
  optimizer_def = %OPTIMIZER
  z_loss = %Z_LOSS
  label_smoothing = %LABEL_SMOOTHING
  loss_normalizing_factor = %LOSS_NORMALIZING_FACTOR

network.Transformer.config = @network.T5Config()
network.T5Config:
  vocab_size = %NUM_EMBEDDINGS
  dtype = 'bfloat16'
  head_dim = 64
  dropout_rate = %DROPOUT_RATE

EVAL_DROPOUT_SEED = None
EVAL_NUM_MCDROPOUT_SAMPLES = None
ENSEMBLE_PROBS = True
models.EncoderDecoderBeamScoreModel.score_batch:
  dropout_seed = %EVAL_DROPOUT_SEED
  num_mcdropout_samples = %EVAL_NUM_MCDROPOUT_SAMPLES
  ensemble_probs = %ENSEMBLE_PROBS

models.EncoderDecoderBeamScoreModel.predict_batch:
  dropout_seed = %EVAL_DROPOUT_SEED
  num_mcdropout_samples = %EVAL_NUM_MCDROPOUT_SAMPLES
  ensemble_probs = %ENSEMBLE_PROBS
